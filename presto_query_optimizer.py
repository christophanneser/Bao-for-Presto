"""This modules covers all currently implemented presto query optimizers and rules."""

# Presto's 21 query OPTIMIZERS
_add_local_exchanges = 'AddLocalExchanges'
_apply_connector_optimization = 'ApplyConnectorOptimization'
_check_subquery_nodes_are_rewritten = 'CheckSubqueryNodesAreRewritten'
_hash_generation_optimizer = 'HashGenerationOptimizer'
_implement_intersect_and_except_as_union = 'ImplementIntersectAndExceptAsUnion'
_index_join_optimizer = 'IndexJoinOptimizer'
_iterative_optimizer = 'IterativeOptimizer'
_key_based_sampler = 'KeyBasedSampler'
_limit_push_down = 'LimitPushDown'
_metadata_delete_optimizer = 'MetadataDeleteOptimizer'
_metadata_query_optimizer = 'MetadataQueryOptimizer'
_optimize_mixed_distinct_aggregations = 'OptimizeMixedDistinctAggregations'
_prune_unreferenced_outputs = 'PruneUnreferencedOutputs'
_pushdown_subfields = 'PushdownSubfields'
_remove_unsupported_dynamic_filters = 'RemoveUnsupportedDynamicFilters'
_replicate_semi_join_in_delete = 'ReplicateSemiJoinInDelete'
_rule_remove_unsupported_dynamic_filters = 'RemoveUnsupportedDynamicFilters'
_set_flattening_optimizer = 'SetFlatteningOptimizer'
_stats_recording_plan_optimizer = 'StatsRecordingPlanOptimizer'
_transform_quantified_comparison_apply_to_lateral_join = 'TransformQuantifiedComparisonApplyToLateralJoin'
_unalias_symbol_references = 'UnaliasSymbolReferences'
_window_filter_push_down = 'WindowFilterPushDown'

# Presto's 105 query rewrite RULES
_add_intermediate_aggregations = 'AddIntermediateAggregations'
_aggregation_row_expression_rewrite = 'AggregationRowExpressionRewrite'
_apply_row_expression_rewrite = 'ApplyRowExpressionRewrite'
_canonicalize_expressions = 'CanonicalizeExpressions'
_check_no_plan_node_matches_rule = 'CheckNoPlanNodeMatchesRule'
_create_partial_top_n = 'CreatePartialTopN'
_desugar_at_time_zone = 'DesugarAtTimeZone'
_desugar_current_user = 'DesugarCurrentUser'
_desugar_lambda_expression = 'DesugarLambdaExpression'
_desugar_row_subscript = 'DesugarRowSubscript'
_desugar_try_expression = 'DesugarTryExpression'
_determine_join_distribution_type = 'DetermineJoinDistributionType'
_determine_semi_join_distribution_type = 'DetermineSemiJoinDistributionType'
_eliminate_cross_joins = 'EliminateCrossJoins'
_eliminate_empty_joins = 'EliminateEmptyJoins'
_evaluate_zero_limit = 'EvaluateZeroLimit'
_evaluate_zero_sample = 'EvaluateZeroSample'
_extract_from_filter = 'ExtractFromFilter'
_extract_from_join = 'ExtractFromJoin'
_extract_spatial_inner_join = 'ExtractSpatialInnerJoin'
_extract_spatial_left_join = 'ExtractSpatialLeftJoin'
_filter_row_expression_rewrite = 'FilterRowExpressionRewrite'
_implement_bernoulli_sample_as_filter = 'ImplementBernoulliSampleAsFilter'
_implement_filtered_aggregations = 'ImplementFilteredAggregations'
_implement_offset = 'ImplementOffset'
_inline_projections = 'InlineProjections'
_inline_sql_functions = 'InlineSqlFunctions'
_join_row_expression_rewrite = 'JoinRowExpressionRewrite'
_merge_adjacent_windows_over_projects = 'MergeAdjacentWindowsOverProjects'
_merge_filters = 'MergeFilters'
_merge_limits = 'MergeLimits'
_merge_limit_with_distinct = 'MergeLimitWithDistinct'
_merge_limit_with_sort = 'MergeLimitWithSort'
_merge_limit_with_top_n = 'MergeLimitWithTopN'
_multiple_distinct_aggregation_to_mark_distinct = 'MultipleDistinctAggregationToMarkDistinct'
_pick_table_layout_for_predicate = 'PickTableLayoutForPredicate'
_pick_table_layout_without_predicate = 'PickTableLayoutWithoutPredicate'
_plan_remote_pojections = 'PlanRemotePojections'
_project_row_expression_rewrite = 'ProjectRowExpressionRewrite'
_prune_aggregation_columns = 'PruneAggregationColumns'
_prune_aggregation_source_columns = 'PruneAggregationSourceColumns'
_prune_count_aggregation_over_scalar = 'PruneCountAggregationOverScalar'
_prune_cross_join_columns = 'PruneCrossJoinColumns'
_prune_filter_columns = 'PruneFilterColumns'
_prune_index_source_columns = 'PruneIndexSourceColumns'
_prune_join_children_columns = 'PruneJoinChildrenColumns'
_prune_join_columns = 'PruneJoinColumns'
_prune_limit_columns = 'PruneLimitColumns'
_prune_mark_distinct_columns = 'PruneMarkDistinctColumns'
_prune_order_by_in_aggregation = 'PruneOrderByInAggregation'
_prune_output_columns = 'PruneOutputColumns'
_prune_project_columns = 'PruneProjectColumns'
_prune_redundant_projection_assignments = 'PruneRedundantProjectionAssignments'
_prune_semi_join_columns = 'PruneSemiJoinColumns'
_prune_semi_join_filtering_source_columns = 'PruneSemiJoinFilteringSourceColumns'
_prune_table_scan_columns = 'PruneTableScanColumns'
_prune_top_n_columns = 'PruneTopNColumns'
_prune_values_columns = 'PruneValuesColumns'
_prune_window_columns = 'PruneWindowColumns'
_push_aggregation_through_outer_join = 'PushAggregationThroughOuterJoin'
_push_down_dereference_through = 'PushDownDereferenceThrough'
_push_down_dereference_through_join = 'PushDownDereferenceThroughJoin'
_push_down_dereference_through_project = 'PushDownDereferenceThroughProject'
_push_down_dereference_through_semi_join = 'PushDownDereferenceThroughSemiJoin'
_push_down_dereference_through_unnest = 'PushDownDereferenceThroughUnnest'
_push_limit_through_mark_distinct = 'PushLimitThroughMarkDistinct'
_push_limit_through_offset = 'PushLimitThroughOffset'
_push_limit_through_outer_join = 'PushLimitThroughOuterJoin'
_push_limit_through_project = 'PushLimitThroughProject'
_push_limit_through_semi_join = 'PushLimitThroughSemiJoin'
_push_limit_through_union = 'PushLimitThroughUnion'
_push_offset_through_project = 'PushOffsetThroughProject'
_push_partial_aggregation_through_exchange = 'PushPartialAggregationThroughExchange'
_push_partial_aggregation_through_join = 'PushPartialAggregationThroughJoin'
_push_projection_through_exchange = 'PushProjectionThroughExchange'
_push_projection_through_union = 'PushProjectionThroughUnion'
_push_remote_exchange_through_assign_unique_id = 'PushRemoteExchangeThroughAssignUniqueId'
_push_table_write_through_union = 'PushTableWriteThroughUnion'
_push_top_n_through_union = 'PushTopNThroughUnion'
_remove_empty_delete = 'RemoveEmptyDelete'
_remove_full_sample = 'RemoveFullSample'
_remove_redundant_identity_projections = 'RemoveRedundantIdentityProjections'
_remove_trivial_filters = 'RemoveTrivialFilters'
_remove_unreferenced_scalar_apply_nodes = 'RemoveUnreferencedScalarApplyNodes'
_remove_unreferenced_scalar_lateral_nodes = 'RemoveUnreferencedScalarLateralNodes'
_reorder_joins = 'ReorderJoins'
_rewrite_aggregation_if_to_filter = 'RewriteAggregationIfToFilter'
_rewrite_filter_with_external_function_to_project = 'RewriteFilterWithExternalFunctionToProject'
_rewrite_spatial_partitioning_aggregation = 'RewriteSpatialPartitioningAggregation'
_simplify_count_over_constant = 'SimplifyCountOverConstant'
_simplify_expressions = 'SimplifyExpressions'
_single_distinct_aggregation_to_group_by = 'SingleDistinctAggregationToGroupBy'
_spatial_join_row_expression_rewrite = 'SpatialJoinRowExpressionRewrite'
_swap_adjacent_windows_by_specifications = 'SwapAdjacentWindowsBySpecifications'
_table_finish_row_expression_rewrite = 'TableFinishRowExpressionRewrite'
_table_writer_row_expression_rewrite = 'TableWriterRowExpressionRewrite'
_transform_correlated_in_predicate_to_join = 'TransformCorrelatedInPredicateToJoin'
_transform_correlated_lateral_join_to_join = 'TransformCorrelatedLateralJoinToJoin'
_transform_correlated_scalar_aggregation_to_join = 'TransformCorrelatedScalarAggregationToJoin'
_transform_correlated_scalar_subquery = 'TransformCorrelatedScalarSubquery'
_transform_correlated_single_row_subquery_to_project = 'TransformCorrelatedSingleRowSubqueryToProject'
_transform_exists_apply_to_lateral_node = 'TransformExistsApplyToLateralNode'
_transform_uncorrelated_in_predicate_subquery_to_semi_join = 'TransformUncorrelatedInPredicateSubqueryToSemiJoin'
_transform_uncorrelated_lateral_to_join = 'TransformUncorrelatedLateralToJoin'
_values_row_expression_rewrite = 'ValuesRowExpressionRewrite'
_window_row_expression_rewrite = 'WindowRowExpressionRewrite'

# The following optimizers are required to get correct query plans
always_required_optimizers = [_add_local_exchanges, _stats_recording_plan_optimizer, _apply_connector_optimization, _iterative_optimizer]

# The following rules are required to get correct query plans
always_required_rules = [_plan_remote_pojections, _push_aggregation_through_outer_join, _push_partial_aggregation_through_exchange,
                         _remove_redundant_identity_projections, _eliminate_cross_joins]
